#/opt/anaconda3/envs/ERC_networks pythonimport pandas as pdimport numpy as np#Hardcoded for developmentN1_file_path='/Users/esforsythe/Documents/Work/Bioinformatics/ERC_networks/Analysis/Orthofinder/Results_Oct15/Phylogenetic_Hierarchical_Orthogroups/N1.tsv' #Function for creating a dataframe with the species countsdef make_seq_counts_df(N1_file_path):    #open N1 file    N1_file=pd.read_csv(N1_file_path, sep='\t')        #Get a list of the species names (note the first 4 columns are various IDs)    sp_list=list(N1_file.columns[3:])        ##Create dataframe that has the counts for each species    #Create empty df to fill in     #counts_df= pd.DataFrame()        #Make blank array for parameter scan    counts_array=np.empty((N1_file.shape[0], len(sp_list)))    counts_array[:] = np.NaN        for row_i, row in N1_file.iterrows():        for spec_i, spec in enumerate(sp_list):            if pd.isna(row[spec]):                count=0            elif str(row[spec]).count(spec)>0:                count=str(row[spec]).count(',')+1            else:                count='nan'            counts_array[row_i, spec_i]=count        #Convert to def    counts_df=pd.DataFrame(counts_array)        counts_df = counts_df.apply(pd.to_numeric, errors='coerce', downcast='integer')        counts_df.columns=list(sp_list)        counts_df['HOG'] = N1_file['HOG']    counts_df['OG'] = N1_file['OG']    counts_df['Gene Tree Parent Clade'] = N1_file['Gene Tree Parent Clade']    #Rearrnge the columns    counts_df_rearrange=counts_df.reindex(columns=list(list(counts_df.columns[-3:]) + list(counts_df.columns[0:-3])))    return(counts_df_rearrange)if __name__ == "__main__":    make_seq_counts_df(N1_file_path)    #Make function for filtering dataset by criteriadef filter_gene_fams(N1_file, counts_df_rearrange, sp_list, para_value, rep_value):    #Max number of paralogs    #para_value=4    def max_paralog_bool(row):        return row.max() <= para_value        #Apply the function to the rows of the dataframe    paralog_bool=list(counts_df_rearrange[sp_list].apply(max_paralog_bool, axis=1))        #Minimum number of species represeented    #rep_value=3    #row=list(counts_df.loc[50,])    def min_sp_rep_bool(row):        def condition(x):             return x > 0        bool_arr = condition(row)        return len(np.where(bool_arr)[0]) >= rep_value        #Apply the function to the rows of the dataframe    rep_bool=list(counts_df_rearrange[sp_list].apply(min_sp_rep_bool, axis=1))        #Make blank dataframe to combine the boolian lists above    conditions_met_df= pd.DataFrame()        #Fill in info    conditions_met_df['HOG']=N1_file['HOG']    conditions_met_df['Paralogs_OK']=paralog_bool    conditions_met_df['SPrep_OK']=rep_bool        #Get the rows that pass both criteria    passed_only_df=conditions_met_df[(conditions_met_df['Paralogs_OK']==True) & (conditions_met_df['SPrep_OK']==True)]        #make new df that retains only the keepers     Keeper_HOGs_df= N1_file[N1_file['HOG'].isin(list(passed_only_df['HOG']))]        #Return the filtered dataframe    return Keeper_HOGs_df        